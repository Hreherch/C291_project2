#!/usr/bin/env python3
import sys
import os
import random
from bsddb3 import db

DATABASE = "/tmp/doupton_db/dbdb.db"
TMP_LOC = r"/tmp/doupton_db"
DB_SIZE = 2
SEED = 1000000

#=============================================================================
# Function: Takes args and does thing
#=============================================================================
# args:
#
# wat do:
#

def create_DB( datatype ):
    # Create/Check the working directory
    try:
        os.system( "mkdir /tmp/doupton_db" )
        print( "/tmp/doupton_db created." )
    except Exception as e:
        #print( e )
        print( "/tmp/doupton_dp potentially exists, destroying and continuing..." )
        database = demolish_DB( None )     
        
    print("Creating Database...") 
    try:
        database = db.DB()
        database.open( DATABASE, "Primary", \
                       datatype[0], db.DB_CREATE )
    except Exception as e:
        print("Error occurred when opening database: Err 01")
        print(e)
        return
    if datatype[1]:
        try: 
            indexfile = db.DB()
            indexfile.set_flags(db.DB_DUP) 
            indexfile.open( DATABASE, "IndexFile", \
                              datatype[1], db.DB_CREATE )
            database.associate( indexfile, lambda x,y: y )
            
        except Exception as e:
            print("Error occurred when opening database: Err 02")
            print(e)
            return

    populate( database, indexfile )
    return database

#Code taken from sample code in notes
def populate( database, indexfile ):
    #for index in range( DB_SIZE ):
    #    krng = 64 + random.randint( 0, 63 )
    #    key = ""
    #    for i in range(krng):
    #        key += str( chr( 97 + random.randint( 0, 25 ) ) )
    #    vrng = 64 + random.randint( 0, 63 )
    #    value = ""
    #    for i in range(vrng):
    #        value += str( chr( 97 + random.randint( 0, 25 ) ) )

    #    key = key.encode( encoding="UTF-8" )
    #    value = value.encode( encoding="UTF-8" )
    #    database.put( key, value )

    key = "Key num 1".encode( encoding="UTF-8" )
    value = "Value num 1".encode( encoding="UTF-8" )
    database.put(key, value)
    key = "Key num 2".encode( encoding="UTF-8" )
    value = "Value num 2".encode( encoding="UTF-8" )
    database.put(key, value)

    cur = database.cursor()

    iter =  cur.first()
    print("Key value pairs from primary")
    while iter:
        print(iter[0].decode("UTF-8"))
        print(iter[1].decode("UTF-8"))
        print( iter )
        iter = cur.next()
    cur.close()
    
    cur = indexfile.cursor()
    iter =  cur.first()
    print("Key value pairs from indexfile")
    while iter:
        print(iter[0].decode("UTF-8"))
        print(iter[1].decode("UTF-8"))
        print()
        iter = cur.next()

    print(cur.pget(key))
    cur.close()
    
    database.close() 
    
#=============================================================================
# Function:
#=============================================================================
# args:
#
# wat do:
#
def get_withKey( datatype ):
    print("Get with key")
    pass
 
#=============================================================================
# Function:
#=============================================================================
# args:
#
# wat do:
#
def get_withData( datatype ):
    print("Get with data")
    pass

#=============================================================================
# Function:
#=============================================================================
# args:
#
# wat do:
#
def get_withRange( datatype ):
    print("Get with range")
    pass

#=============================================================================
# Function:
#=============================================================================
# args:
#
# wat do:
#
def demolish_DB( datatype ):
    try:
        os.system( "rm -f /tmp/doupton_db -r" )
        print( "Removed database from /tmp/doupton_db" )
        return None
    except Exception as e:
        #print( e )
        print( "There was an error destroying the DB." )
        return -1

#=============================================================================
# Function:
#=============================================================================
# args:
#
# wat do:
#
# Returns a tuple of (primary datatype, secondary datatype)
def get_datatype():
    if len( sys.argv ) == 1:
        errMsg = sys.argv[0] + ": No DB type specified\n" +\
                 "Try '" + sys.argv[0] + " help' for more information.\n"
        print( errMsg )
        exit()
    if len( sys.argv ) > 2:
        errMsg = sys.argv[0] + ": too many options specified\n" +\
                 "Try '" + sys.argv[0] + " help' for more information.\n"
        print( errMsg )
        exit()
    datatype = sys.argv[1].lower()
    if datatype == "btree":
        datatype = (db.DB_BTREE, None)
    elif datatype == "hash":
        datatype = (db.DB_HASH, None)
    elif datatype == 'indexfile':
        datatype = (db.DB_BTREE, db.DB_HASH)
    elif datatype == "help":
        helpMsg = "Usage: 'mydbtest OPTION'\n" +\
                  "options: 'btree', 'hash', 'indexfile', 'help'\n"
        print( helpMsg )
        exit()
    else:
        errMsg = sys.argv[0] + ": invalid option -- '" +\
                 sys.argv[1] + "'\n" +\
                 "Try '" + sys.argv[0] + " help' for more information.\n"
        print( errMsg )
        exit()
    return datatype
    
#=============================================================================
# Function:
#=============================================================================
# args:
#
# wat do:
#
def showoptions():
    #print(chr(27) + "[2J")
    print( "=" * 80 )
    print( " =" * 40 )
    print( "dbDB".center(80) )
    print( "= " * 40 )
    
    print()
    
    options = [ "Create/Populate Database", "Get with KEY", "Get with DATA", \
                "Get with RANGE", "Demolish Database", "Exit" ]
                
    for index in range( len( options ) ):
        optStr = "[" + str(index) + "]: " + options[index]
        print( optStr )
    
    print()


#=============================================================================
# Function:
#=============================================================================
# args:
#
# wat do:
#
def main():
    datatype = get_datatype()
    database = None
    while True:
        showoptions()
        option = input("dbDB>")
        
        if option in "1234" and database == None:
            print( "ERROR:\tYou must first create a database." )
            continue
        
        if option == '0':
            if database != None:
                errMsg = "ERROR:\tThere is an active Database already.\n" +\
                         "You cannot populate another without " +\
                         "destroying it first."
                print( errMsg )
            database = create_DB( datatype )
        elif option == '1':
            get_withKey( database )
        elif option == '2':
            get_withData( database )
        elif option == '3':
            get_withRange( database )
        elif option == '4':
            database = demolish_DB( database )
        elif option == '5':
            database = demolish_DB( database )
            exit()
        else:
            errMsg = "ERROR:\tYou must specify one of the options listed."
            print( errMsg )
            
        
main()
