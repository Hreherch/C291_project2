#!/usr/bin/env python3
import sys
from bsddb3 import db

DATABASE = "/tmp/doupton_db/main.db"
INDEXFILE = "/tmp/doupton_db/indexfile.db"

#=============================================================================
# Function:
#=============================================================================
# args:
#
# wat do:
#
def create_DB( datatype ):
    print("Creating Database...") 
    database = db.DB()
    second_database = db.DB()
    try: 
        database.open( DATABASE, None , datatype[0], db.DB_CREATE )
        if datatype[1]:
            second_database.open( INDEXFILE, None, datatype[1], db.DB_CREATE )
    except:
        print("Something went wrong")
        return

    ##Test
    curs = database.cursor()
    curs.put( b'pear', 'green', db.DB_KEYFIRST )
    print(curs.first())
    database.close()
    
#=============================================================================
# Function:
#=============================================================================
# args:
#
# wat do:
#
def get_withKey( datatype ):
    print("Get with key")
    pass
 
#=============================================================================
# Function:
#=============================================================================
# args:
#
# wat do:
#
def get_withData( datatype ):
    print("Get with data")
    pass

#=============================================================================
# Function:
#=============================================================================
# args:
#
# wat do:
#
def get_withRange( datatype ):
    print("Get with range")
    pass

#=============================================================================
# Function:
#=============================================================================
# args:
#
# wat do:
#
def demolish_DB( datatype ):
    print("Demolish DB")
    pass

#=============================================================================
# Function:
#=============================================================================
# args:
#
# wat do:
#
# Returns a tuple of (primary datatype, secondary datatype)
def get_datatype():
    if len( sys.argv ) == 1:
        errMsg = sys.argv[0] + ": No DB type specified\n" +\
                 "Try '" + sys.argv[0] + " help' for more information.\n"
        print( errMsg )
        exit()
    if len( sys.argv ) > 2:
        errMsg = sys.argv[0] + ": too many options specified\n" +\
                 "Try '" + sys.argv[0] + " help' for more information.\n"
        print( errMsg )
        exit()
    datatype = sys.argv[1].lower()
    if datatype == "btree":
        datatype = (db.DB_BTREE, None)
    elif datatype == "hash":
        datatype = (db.DB_HASH, None)
    elif datatype == 'indexfile':
        datatype == (db.DB_BTREE, db.DB_HASH)
    elif datatype == "help":
        helpMsg = "Usage: 'mydbtest OPTION'\n" +\
                  "options: 'btree', 'hash', 'indexfile', 'help'\n"
        print( helpMsg )
        exit()
    else:
        errMsg = sys.argv[0] + ": invalid option -- '" +\
                 sys.argv[1] + "'\n" +\
                 "Try '" + sys.argv[0] + " help' for more information.\n"
        print( errMsg )
        exit()
    return datatype
    
#=============================================================================
# Function:
#=============================================================================
# args:
#
# wat do:
#
def showoptions():
    #print(chr(27) + "[2J")
    print( "=" * 80 )
    print( " =" * 40 )
    print( "dbDB".center(80) )
    print( "= " * 40 )
    
    print()
    
    options = [ "Create/Populate Database", "Get with KEY", "Get with DATA", \
                "Get with RANGE", "Demolish Database", "Exit" ]
                
    for index in range( len( options ) ):
        optStr = "[" + str(index) + "]: " + options[index]
        print( optStr )
    
    print()


#=============================================================================
# Function:
#=============================================================================
# args:
#
# wat do:
#
def main():
    datatype = get_datatype()
    database = None
    while True:
        showoptions()
        option = input("dbDB>")
        
        if option == '0':
            if database != None:
                errMsg = "ERROR:\tThere is an active Database already.\n" +\
                         "You cannot populate another without destroying it first."
                print( errMsg )
            database = create_DB( datatype )
        elif option == '1':
            continue
        elif option == '2':
            continue
        elif option == '3':
            continue
        elif option == '4':
            continue
        elif option == '5':
            exit()
        else:
            errMsg = "ERROR:\tYou must specify one of the options listed."
            print( errMsg )
            
        
main()

