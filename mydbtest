#!/usr/bin/env python3
import sys
import os
import random
from bsddb3 import db

DATABASE = "/tmp/doupton_db/dbdb.db"
TMP_LOC = r"/tmp/doupton_db"
DB_SIZE = 10
SEED = 1000000

#=============================================================================
# Function: Takes args and does thing
#=============================================================================
# args:
#
# wat do:
#

def create_DB( datatype ):
                                             ##Remember to mkdir /tmp/doupton_db
    print("Creating Database...") 
    try:
        database = db.DB()
        database.open( DATABASE, "Primary", \
                       datatype[0], db.DB_CREATE )
    except Exception as e:
        print("Error occurred when opening database: Err 01")
        print(e)
        return
    if datatype[1]:
        try: 
            indexfile = db.DB()
            indexfile.set_flags(db.DB_DUP) 
            indexfile.open( DATABASE, "IndexFile", \
                              datatype[1], db.DB_CREATE )
            database.associate( indexfile, lambda key,data: data )
        except Exception as e:
            print("Error occurred when opening indexfile: Err 02")
            print(e)
            return

    populate( database )
    print("Success!")
    return database

#Code modified from sample code in notes
def populate( database ):
    print("Populating Database...")
    count = 0
    #testcase = open("testcase.txt", "w")
    random.seed(SEED)
    while count < DB_SIZE:
        count += 1
        krng = 64 + random.randint( 0, 63 )
        key = ""
        for i in range(krng):
            key += str( chr( 97 + random.randint( 0, 25 ) ) )
        vrng = 64 + random.randint( 0, 63 )
        value = ""
        for i in range(vrng):
            value += str( chr( 97 + random.randint( 0, 25 ) ) )

        key = key.encode( encoding="UTF-8" )
        value = value.encode( encoding="UTF-8" )
        try:
            database.put( key, value, flags=db.DB_NOOVERWRITE )
        except:
            #Try another key that isn't a duplicate
            print("Duplicated encountered; Trying different key...")
            count -= 1
        #testcase.write(key.decode("UTF-8")+":"+value.decode("UTF-8")+"\n")
    #testcase.close()

    #vals = cur.pget(value, None, flags=db.DB_SET)
    #while vals:
    #    print(vals[1:])
    #    vals = cur.pget( db.DB_NEXT_DUP )
    #cur.close()
    
#=============================================================================
# Function:
#=============================================================================
# args:
#
# wat do:
#
def get_withKey( database ):
    print("Get with key")
    pass
 
#=============================================================================
# Function:
#=============================================================================
# args:
#
# wat do:
#
def get_withData( database ):
    print("Get with data")
    pass

#=============================================================================
# Function:
#=============================================================================
# args:
#
# wat do:
#
def get_withRange( database ):
    print("Get with range")
    pass

#=============================================================================
# Function:
#=============================================================================
# args:
#
# wat do:
#
def demolish_DB( database ):
    empty = db.DB()
    empty.remove( DATABASE )
    database.close()
    empty.close()
    return None

#=============================================================================
# Function:
#=============================================================================
# args:
#
# wat do:
#
# Returns a tuple of (primary datatype, secondary datatype)
def get_datatype():
    if len( sys.argv ) == 1:
        errMsg = sys.argv[0] + ": No DB type specified\n" +\
                 "Try '" + sys.argv[0] + " help' for more information.\n"
        print( errMsg )
        exit()
    if len( sys.argv ) > 2:
        errMsg = sys.argv[0] + ": too many options specified\n" +\
                 "Try '" + sys.argv[0] + " help' for more information.\n"
        print( errMsg )
        exit()
    datatype = sys.argv[1].lower()
    if datatype == "btree":
        datatype = (db.DB_BTREE, None)
    elif datatype == "hash":
        datatype = (db.DB_HASH, None)
    elif datatype == 'indexfile':
        datatype = (db.DB_BTREE, db.DB_HASH)
    elif datatype == "help":
        helpMsg = "Usage: 'mydbtest OPTION'\n" +\
                  "options: 'btree', 'hash', 'indexfile', 'help'\n"
        print( helpMsg )
        exit()
    else:
        errMsg = sys.argv[0] + ": invalid option -- '" +\
                 sys.argv[1] + "'\n" +\
                 "Try '" + sys.argv[0] + " help' for more information.\n"
        print( errMsg )
        exit()
    return datatype
    
#=============================================================================
# Function:
#=============================================================================
# args:
#
# wat do:
#
def showoptions():
    #print(chr(27) + "[2J")
    print( "=" * 80 )
    print( " =" * 40 )
    print( "dbDB".center(80) )
    print( "= " * 40 )
    
    print()
    
    options = [ "Create/Populate Database", "Get with KEY", "Get with DATA", \
                "Get with RANGE", "Demolish Database", "Exit" ]
                
    for index in range( len( options ) ):
        optStr = "[" + str(index) + "]: " + options[index]
        print( optStr )
    
    print()


#=============================================================================
# Function:
#=============================================================================
# args:
#
# wat do:
#
def main():
    datatype = get_datatype()
    database = None
    while True:
        showoptions()
        option = input("dbDB>")
       
        # Create/Populate Database
        if option == '0':
            if database != None:
                errMsg = "ERROR:\tThere is an active Database already.\n" +\
                         "You cannot populate another without " +\
                         "destroying it first."
                print( errMsg )
                continue
            database = create_DB( datatype )
        
        # Get with KEY
        elif option == '1':
            if database == None:
                errMsg = "ERROR:\tYou must first create the database."
                print( errMsg )
                continue
            get_withKey( database )
        
        # Get with DATA
        elif option == '2':
            get_withData( database )
        
        # Get with RANGE
        elif option == '3':
            get_withRange( database )
            
        # Demolish Database
        elif option == '4':
            database = demolish_DB( database )
            
        # Exit
        elif option == '5':
            if database != None:
                print( "\nThe database is still active...")
                print( "Press any key to exit, press y to demolish before exiting." )
                option = input( "Do you wish to demolish the DB?: " )
                if option == 'y':
                    
            exit()
        else:
            errMsg = "ERROR:\tYou must specify one of the options listed."
            print( errMsg )
            
        
main()
